def hensels_lifting(f, p, k):
    df = f.derivative()

    # convert function on GF(p)
    R.<y> = PolynomialRing(GF(p), "y")
    f2 = R(f.list())
    base = Integer(f2.roots()[0][0])

    prev_r = base
    for i in range(2, k+1):
        pi = p ^ i
        r = prev_r
        fr = f(r)
        dfr = df(r)
        s = Integer( r - fr * inverse_mod(Integer(dfr), pi) )
        prev_r = Integer(Mod(s, pi))

        # very slow
        # R.<z> = PolynomialRing(GF(pi), "z")
        # f3 = R(f.list())
        # assert f3(s) == 0
    return prev_r


x = polygen(QQ, 'x')
f = (
    45406770103725904509890104231914678754265961643298482440409237765195072368733672685631587979562241346 * x
    ^ 4 + 42764372489624602989152383173709795403796386376344802703066528962696589468564501897000324538498812883 * x
    ^ 3 + 37672731284607729155480237866218406485893919987814572486490754064498223292180995037432012350216544417 * x
    ^ 2
    + 55462425449896168600390367564436787134741290054741525865807795492693442375757671549228298754153509613 * x
    + 6778690755895128168751737959454411972187106669733266559106651743590246692689398562032067795146717162848413292299573013038367117575935673619248776925892672201933424467005517162118712395701681263279585553299544107860626811206695844212433182471614373859755499052750286667585910623259340579702249091680614010546399687179863049582625671630876108790555962058243905551470611736992489702159306356102118074450673803009393106039180751255185874156459283395261688861
)
p = 35671
k = 100

from Crypto.Util.number import long_to_bytes
print(long_to_bytes(hensels_lifting(f, p, k)))